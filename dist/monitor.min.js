(function () {
    'use strict';

    var config = {
        appId: 'fm-unnamed',
        reportFields: ['colno', 'lineno', 'filename', 'message'],
        sameOrigin: true,
        distinct: true,
        cacheKey: 'FrontMonitorCache',
        cacheLimit: 50,
        bufferTime: 5000,
        bufferSize: 10,
        xhrErrorLevel: 'ALL',
        xhrErrorMessage: 'message',
        catchUnhandledRejection: true
    };
    var ERROR_TYPE;
    (function (ERROR_TYPE) {
        ERROR_TYPE["RUNTIME"] = "RUNTIME";
        ERROR_TYPE["RESOURCE"] = "RESOURCE";
        ERROR_TYPE["UNHANDLEDREJECTION"] = "UNHANDLEDREJECTION";
        ERROR_TYPE["XMLHTTPREQUEST"] = "XMLHTTPREQUEST";
    })(ERROR_TYPE || (ERROR_TYPE = {}));

    function errorInfo(e) {
        console.error("[Front-Monitor Error]: " + e);
    }
    function isObject(o) {
        return typeof o === 'object' && o !== null;
    }
    function isString(o) {
        return typeof o === 'string';
    }
    // export function isArray(o: any): boolean {
    //     return Array.isArray(o)
    // }
    function isAll(o) {
        return /^all$/i.test(o);
    }
    function isSameErrorEvent(prev, next) {
        return prev.type === next.type && prev.colno === next.colno && prev.lineno === next.lineno && prev.filename === next.filename && prev.message === next.message;
    }
    var isSameOrigin = (function () {
        var origin = window.location.protocol + "//" + document.domain + (window.location.port ? ':' + window.location.port : '');
        return function (fileUrl) {
            return fileUrl.indexOf(origin) === 0;
        };
    })();
    var genErrorInfoFunc = function (fields) { return function (errorInfo) {
        var reportInfo = Object.create(null);
        fields.forEach(function (f) {
            reportInfo[f] = errorInfo[f] || '';
        });
        reportInfo.timestamp = Date.now();
        reportInfo.type = errorInfo.custom_type;
        return reportInfo;
    }; };
    var isXHRErrorFunc = function (flag) { return function (status) {
        status += '';
        if (isString(flag)) {
            if (isAll(flag)) {
                return flag !== '200';
            }
            return flag.split('/').indexOf(status) > -1;
        }
        else if (flag instanceof RegExp) {
            return flag.test(status);
        }
        return false;
    }; };

    var Reporter = /** @class */ (function () {
        function Reporter(appId, url) {
            this.appId = appId;
            this.url = url;
        }
        Reporter.prototype.report = function (records) {
            var queryString = "?appId=" + encodeURIComponent(this.appId) + "&ua=" + encodeURIComponent(navigator.userAgent) + "&records=" + encodeURIComponent(JSON.stringify(records));
            var img = new Image();
            img.onload = function () {
                img = null;
            };
            img.src = "" + this.url + queryString;
        };
        return Reporter;
    }());

    var ErrorStack = /** @class */ (function () {
        function ErrorStack(reporter, distinct, cacheKey, cacheLimit, bufferTime, bufferSize) {
            this.distinct = distinct;
            this.cacheKey = cacheKey;
            this.cacheLimit = cacheLimit;
            this.bufferTime = bufferTime;
            this.bufferSize = bufferSize;
            this.reporter = reporter;
            var cachedQueue = window.localStorage.getItem(this.cacheKey);
            if (cachedQueue) {
                try {
                    this.queue = JSON.parse(cachedQueue);
                    this.queue.length && this.startTimer();
                }
                catch (e) {
                    errorInfo('load cached error records failed');
                    this.queue = [];
                }
                window.localStorage.removeItem(this.cacheKey);
            }
            else {
                this.queue = [];
            }
        }
        ErrorStack.prototype.startTimer = function () {
            !this.timer && (this.timer = setTimeout(this.flush.bind(this), this.bufferTime));
        };
        ErrorStack.prototype.cacheRecords = function () {
            window.localStorage.setItem(this.cacheKey, JSON.stringify(this.queue));
        };
        ErrorStack.prototype.push = function (record) {
            if (this.queue.length >= this.cacheLimit) {
                return;
            }
            if (this.distinct && this.queue.some(function (e) { return isSameErrorEvent(e, record); })) {
                return;
            }
            this.queue.push(record);
            this.cacheRecords();
            this.startTimer();
        };
        ErrorStack.prototype.flush = function () {
            var splice = this.queue.splice(0, this.bufferSize);
            if (splice.length) {
                this.reporter.report(splice);
                this.cacheRecords();
            }
            this.queue.length && this.startTimer();
        };
        return ErrorStack;
    }());

    function addEventListener (win, catchErrorByCustomType, sameOrigin, catchUnhandledRejection) {
        var catchRuntimeError = catchErrorByCustomType(ERROR_TYPE.RUNTIME);
        var catchResourceError = catchErrorByCustomType(ERROR_TYPE.RESOURCE);
        var handler = function (ee) {
            if (ee.target === win) {
                if (!sameOrigin || isSameOrigin(ee.filename)) {
                    catchRuntimeError(ee);
                }
            }
            else if (ee.target instanceof HTMLElement) {
                catchResourceError({
                    colno: 0,
                    lineno: 0,
                    filename: ee.target.src || ee.target.href,
                    message: "load " + ee.target.tagName + " resource failed"
                });
            }
        };
        win.addEventListener('error', handler, true);
        if (catchUnhandledRejection) {
            var catchUnhandledRejectionError_1 = catchErrorByCustomType(ERROR_TYPE.UNHANDLEDREJECTION);
            var unhandledRejectionHandler = function (ee) {
                var message = isObject(ee.reason) ? ee.reason.stack : ee.reason;
                catchUnhandledRejectionError_1({
                    colno: 0,
                    lineno: 0,
                    filename: '',
                    message: message
                });
            };
            win.addEventListener('unhandledrejection', unhandledRejectionHandler, true);
        }
    }

    function hookXHR(isXHRError, catchErrorByCustomType) {
        var catchXHRError = catchErrorByCustomType(ERROR_TYPE.XMLHTTPREQUEST);
        var originalOpenFunc = XMLHttpRequest.prototype.open;
        XMLHttpRequest.prototype.open = function open() {
            var args = [];
            for (var _i = 0; _i < arguments.length; _i++) {
                args[_i] = arguments[_i];
            }
            var method = args[0], url = args[1], async = args[2];
            this.addEventListener && this.addEventListener('loadend', function hookLoadend() {
                isXHRError(this.status) && catchXHRError({
                    colno: 0,
                    lineno: 0,
                    filename: url,
                    message: method.toUpperCase() + "(" + (async ? 'asynchronous' : 'synchronous') + ") the service resource failed with status:" + this.status
                });
            });
            return originalOpenFunc.apply(this, args);
        };
    }

    var __assign = (undefined && undefined.__assign) || function () {
        __assign = Object.assign || function(t) {
            for (var s, i = 1, n = arguments.length; i < n; i++) {
                s = arguments[i];
                for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                    t[p] = s[p];
            }
            return t;
        };
        return __assign.apply(this, arguments);
    };
    (function (win) {
        if (typeof win === 'undefined') {
            return errorInfo('monitor need browser-like environment');
        }
        function FrontMonitor(config$1) {
            if (isString(config$1)) {
                config$1 = {
                    reportUrl: config$1
                };
            }
            if (!isObject(config$1) || !isString(config$1.reportUrl) || !config$1.reportUrl.length) {
                return errorInfo('invalid report url');
            }
            var conf = __assign({}, config, config$1);
            var genErrorInfo = genErrorInfoFunc(conf.reportFields);
            var isXHRError = isXHRErrorFunc(conf.xhrErrorLevel);
            var reporter = new Reporter(conf.appId, conf.reportUrl);
            var stack = new ErrorStack(reporter, conf.distinct, conf.cacheKey, conf.cacheLimit, conf.bufferTime, conf.bufferSize);
            var catchErrorByCustomType = function (type) { return function (ee) {
                ee.custom_type = type;
                stack.push(genErrorInfo(ee));
            }; };
            addEventListener(win, catchErrorByCustomType, conf.sameOrigin, conf.catchUnhandledRejection);
            hookXHR(isXHRError, catchErrorByCustomType);
        }
        win.FrontMonitor = FrontMonitor;
    })(window);

}());
